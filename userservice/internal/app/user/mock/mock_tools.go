// Code generated by MockGen. DO NOT EDIT.
// Source: user/internal/app/user/tools (interfaces: PasswordEncrypter)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	models "user/internal/app/models"

	gomock "github.com/golang/mock/gomock"
)

// MockPasswordEncrypter is a mock of PasswordEncrypter interface.
type MockPasswordEncrypter struct {
	ctrl     *gomock.Controller
	recorder *MockPasswordEncrypterMockRecorder
}

// MockPasswordEncrypterMockRecorder is the mock recorder for MockPasswordEncrypter.
type MockPasswordEncrypterMockRecorder struct {
	mock *MockPasswordEncrypter
}

// NewMockPasswordEncrypter creates a new mock instance.
func NewMockPasswordEncrypter(ctrl *gomock.Controller) *MockPasswordEncrypter {
	mock := &MockPasswordEncrypter{ctrl: ctrl}
	mock.recorder = &MockPasswordEncrypterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPasswordEncrypter) EXPECT() *MockPasswordEncrypterMockRecorder {
	return m.recorder
}

// BeforeChange mocks base method.
func (m *MockPasswordEncrypter) BeforeChange(arg0 models.ChangeUser) (models.ChangeUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeforeChange", arg0)
	ret0, _ := ret[0].(models.ChangeUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeforeChange indicates an expected call of BeforeChange.
func (mr *MockPasswordEncrypterMockRecorder) BeforeChange(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeforeChange", reflect.TypeOf((*MockPasswordEncrypter)(nil).BeforeChange), arg0)
}

// BeforeCreate mocks base method.
func (m *MockPasswordEncrypter) BeforeCreate(arg0 models.NewUser) (models.NewUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeforeCreate", arg0)
	ret0, _ := ret[0].(models.NewUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeforeCreate indicates an expected call of BeforeCreate.
func (mr *MockPasswordEncrypterMockRecorder) BeforeCreate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeforeCreate", reflect.TypeOf((*MockPasswordEncrypter)(nil).BeforeCreate), arg0)
}

// CompPass mocks base method.
func (m *MockPasswordEncrypter) CompPass(arg0 []byte, arg1 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompPass", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CompPass indicates an expected call of CompPass.
func (mr *MockPasswordEncrypterMockRecorder) CompPass(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompPass", reflect.TypeOf((*MockPasswordEncrypter)(nil).CompPass), arg0, arg1)
}
