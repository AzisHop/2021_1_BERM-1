// Code generated by MockGen. DO NOT EDIT.
// Source: user/internal/app/user (interfaces: UseCase)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	models "user/internal/app/models"

	gomock "github.com/golang/mock/gomock"
)

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// Change mocks base method.
func (m *MockUseCase) Change(arg0 models.ChangeUser, arg1 context.Context) (*models.UserBasicInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Change", arg0, arg1)
	ret0, _ := ret[0].(*models.UserBasicInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Change indicates an expected call of Change.
func (mr *MockUseCaseMockRecorder) Change(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Change", reflect.TypeOf((*MockUseCase)(nil).Change), arg0, arg1)
}

// Create mocks base method.
func (m *MockUseCase) Create(arg0 models.NewUser, arg1 context.Context) (*models.UserBasicInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*models.UserBasicInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUseCaseMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUseCase)(nil).Create), arg0, arg1)
}

// GetById mocks base method.
func (m *MockUseCase) GetById(arg0 uint64, arg1 context.Context) (*models.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", arg0, arg1)
	ret0, _ := ret[0].(*models.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockUseCaseMockRecorder) GetById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockUseCase)(nil).GetById), arg0, arg1)
}

// GetUsers mocks base method.
func (m *MockUseCase) GetUsers(arg0 context.Context) ([]models.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", arg0)
	ret0, _ := ret[0].([]models.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockUseCaseMockRecorder) GetUsers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockUseCase)(nil).GetUsers), arg0)
}

// SetImg mocks base method.
func (m *MockUseCase) SetImg(arg0 uint64, arg1 string, arg2 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetImg", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetImg indicates an expected call of SetImg.
func (mr *MockUseCaseMockRecorder) SetImg(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetImg", reflect.TypeOf((*MockUseCase)(nil).SetImg), arg0, arg1, arg2)
}

// SuggestUsersTitle mocks base method.
func (m *MockUseCase) SuggestUsersTitle(arg0 string, arg1 context.Context) ([]models.SuggestUsersTittle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SuggestUsersTitle", arg0, arg1)
	ret0, _ := ret[0].([]models.SuggestUsersTittle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SuggestUsersTitle indicates an expected call of SuggestUsersTitle.
func (mr *MockUseCaseMockRecorder) SuggestUsersTitle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SuggestUsersTitle", reflect.TypeOf((*MockUseCase)(nil).SuggestUsersTitle), arg0, arg1)
}

// Verification mocks base method.
func (m *MockUseCase) Verification(arg0, arg1 string, arg2 context.Context) (*models.UserBasicInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verification", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.UserBasicInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Verification indicates an expected call of Verification.
func (mr *MockUseCaseMockRecorder) Verification(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verification", reflect.TypeOf((*MockUseCase)(nil).Verification), arg0, arg1, arg2)
}
