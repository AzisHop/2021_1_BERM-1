// Code generated by MockGen. DO NOT EDIT.
// Source: post/internal/app/vacancy (interfaces: UseCase)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	models "post/internal/app/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// ChangeVacancy mocks base method.
func (m *MockUseCase) ChangeVacancy(arg0 models.Vacancy, arg1 context.Context) (models.Vacancy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeVacancy", arg0, arg1)
	ret0, _ := ret[0].(models.Vacancy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeVacancy indicates an expected call of ChangeVacancy.
func (mr *MockUseCaseMockRecorder) ChangeVacancy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeVacancy", reflect.TypeOf((*MockUseCase)(nil).ChangeVacancy), arg0, arg1)
}

// CloseVacancy mocks base method.
func (m *MockUseCase) CloseVacancy(arg0 uint64, arg1 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseVacancy", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseVacancy indicates an expected call of CloseVacancy.
func (mr *MockUseCaseMockRecorder) CloseVacancy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseVacancy", reflect.TypeOf((*MockUseCase)(nil).CloseVacancy), arg0, arg1)
}

// Create mocks base method.
func (m *MockUseCase) Create(arg0 models.Vacancy, arg1 context.Context) (*models.Vacancy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*models.Vacancy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUseCaseMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUseCase)(nil).Create), arg0, arg1)
}

// DeleteExecutor mocks base method.
func (m *MockUseCase) DeleteExecutor(arg0 models.Vacancy, arg1 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExecutor", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExecutor indicates an expected call of DeleteExecutor.
func (mr *MockUseCaseMockRecorder) DeleteExecutor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExecutor", reflect.TypeOf((*MockUseCase)(nil).DeleteExecutor), arg0, arg1)
}

// DeleteVacancy mocks base method.
func (m *MockUseCase) DeleteVacancy(arg0 uint64, arg1 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVacancy", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVacancy indicates an expected call of DeleteVacancy.
func (mr *MockUseCaseMockRecorder) DeleteVacancy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVacancy", reflect.TypeOf((*MockUseCase)(nil).DeleteVacancy), arg0, arg1)
}

// FindByID mocks base method.
func (m *MockUseCase) FindByID(arg0 uint64, arg1 context.Context) (*models.Vacancy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", arg0, arg1)
	ret0, _ := ret[0].(*models.Vacancy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockUseCaseMockRecorder) FindByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockUseCase)(nil).FindByID), arg0, arg1)
}

// FindByUserID mocks base method.
func (m *MockUseCase) FindByUserID(arg0 uint64, arg1 context.Context) ([]models.Vacancy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserID", arg0, arg1)
	ret0, _ := ret[0].([]models.Vacancy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserID indicates an expected call of FindByUserID.
func (mr *MockUseCaseMockRecorder) FindByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserID", reflect.TypeOf((*MockUseCase)(nil).FindByUserID), arg0, arg1)
}

// GetActualVacancies mocks base method.
func (m *MockUseCase) GetActualVacancies(arg0 context.Context) ([]models.Vacancy, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActualVacancies", arg0)
	ret0, _ := ret[0].([]models.Vacancy)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetActualVacancies indicates an expected call of GetActualVacancies.
func (mr *MockUseCaseMockRecorder) GetActualVacancies(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActualVacancies", reflect.TypeOf((*MockUseCase)(nil).GetActualVacancies), arg0)
}

// GetArchiveVacancies mocks base method.
func (m *MockUseCase) GetArchiveVacancies(arg0 models.UserBasicInfo, arg1 context.Context) ([]models.Vacancy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArchiveVacancies", arg0, arg1)
	ret0, _ := ret[0].([]models.Vacancy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArchiveVacancies indicates an expected call of GetArchiveVacancies.
func (mr *MockUseCaseMockRecorder) GetArchiveVacancies(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArchiveVacancies", reflect.TypeOf((*MockUseCase)(nil).GetArchiveVacancies), arg0, arg1)
}

// SearchVacancy mocks base method.
func (m *MockUseCase) SearchVacancy(arg0 string, arg1 context.Context) ([]models.Vacancy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchVacancy", arg0, arg1)
	ret0, _ := ret[0].([]models.Vacancy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchVacancy indicates an expected call of SearchVacancy.
func (mr *MockUseCaseMockRecorder) SearchVacancy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchVacancy", reflect.TypeOf((*MockUseCase)(nil).SearchVacancy), arg0, arg1)
}

// SelectExecutor mocks base method.
func (m *MockUseCase) SelectExecutor(arg0 models.Vacancy, arg1 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectExecutor", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SelectExecutor indicates an expected call of SelectExecutor.
func (mr *MockUseCaseMockRecorder) SelectExecutor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectExecutor", reflect.TypeOf((*MockUseCase)(nil).SelectExecutor), arg0, arg1)
}

// SuggestVacancyTitle mocks base method.
func (m *MockUseCase) SuggestVacancyTitle(arg0 string, arg1 context.Context) ([]models.SuggestVacancyTittle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SuggestVacancyTitle", arg0, arg1)
	ret0, _ := ret[0].([]models.SuggestVacancyTittle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SuggestVacancyTitle indicates an expected call of SuggestVacancyTitle.
func (mr *MockUseCaseMockRecorder) SuggestVacancyTitle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SuggestVacancyTitle", reflect.TypeOf((*MockUseCase)(nil).SuggestVacancyTitle), arg0, arg1)
}
