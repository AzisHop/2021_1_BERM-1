// Code generated by MockGen. DO NOT EDIT.
// Source: post/api (interfaces: UserClient)

// Package mock_api is a generated GoMock package.
package mock

import (
	context "context"
	api "post/api"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockUserClient is a mock of UserClient interface.
type MockUserClient struct {
	ctrl     *gomock.Controller
	recorder *MockUserClientMockRecorder
}

// MockUserClientMockRecorder is the mock recorder for MockUserClient.
type MockUserClientMockRecorder struct {
	mock *MockUserClient
}

// NewMockUserClient creates a new mock instance.
func NewMockUserClient(ctrl *gomock.Controller) *MockUserClient {
	mock := &MockUserClient{ctrl: ctrl}
	mock.recorder = &MockUserClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserClient) EXPECT() *MockUserClientMockRecorder {
	return m.recorder
}

// GetSpecializeByUserId mocks base method.
func (m *MockUserClient) GetSpecializeByUserId(arg0 context.Context, arg1 *api.UserRequest, arg2 ...grpc.CallOption) (*api.GetUserSpecializeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSpecializeByUserId", varargs...)
	ret0, _ := ret[0].(*api.GetUserSpecializeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpecializeByUserId indicates an expected call of GetSpecializeByUserId.
func (mr *MockUserClientMockRecorder) GetSpecializeByUserId(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpecializeByUserId", reflect.TypeOf((*MockUserClient)(nil).GetSpecializeByUserId), varargs...)
}

// GetUserById mocks base method.
func (m *MockUserClient) GetUserById(arg0 context.Context, arg1 *api.UserRequest, arg2 ...grpc.CallOption) (*api.UserInfoResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserById", varargs...)
	ret0, _ := ret[0].(*api.UserInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockUserClientMockRecorder) GetUserById(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockUserClient)(nil).GetUserById), varargs...)
}
