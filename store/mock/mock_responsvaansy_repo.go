// Code generated by MockGen. DO NOT EDIT.
// Source: FL_2/store (interfaces: ResponseVacancyRepository)

// Package mock is a generated GoMock package.
package mock

import (
	model "FL_2/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockResponseVacancyRepository is a mock of ResponseVacancyRepository interface.
type MockResponseVacancyRepository struct {
	ctrl     *gomock.Controller
	recorder *MockResponseVacancyRepositoryMockRecorder
}

// MockResponseVacancyRepositoryMockRecorder is the mock recorder for MockResponseVacancyRepository.
type MockResponseVacancyRepositoryMockRecorder struct {
	mock *MockResponseVacancyRepository
}

// NewMockResponseVacancyRepository creates a new mock instance.
func NewMockResponseVacancyRepository(ctrl *gomock.Controller) *MockResponseVacancyRepository {
	mock := &MockResponseVacancyRepository{ctrl: ctrl}
	mock.recorder = &MockResponseVacancyRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResponseVacancyRepository) EXPECT() *MockResponseVacancyRepositoryMockRecorder {
	return m.recorder
}

// Change mocks base method.
func (m *MockResponseVacancyRepository) Change(arg0 model.ResponseVacancy) (*model.ResponseVacancy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Change", arg0)
	ret0, _ := ret[0].(*model.ResponseVacancy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Change indicates an expected call of Change.
func (mr *MockResponseVacancyRepositoryMockRecorder) Change(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Change", reflect.TypeOf((*MockResponseVacancyRepository)(nil).Change), arg0)
}

// Create mocks base method.
func (m *MockResponseVacancyRepository) Create(arg0 model.ResponseVacancy) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockResponseVacancyRepositoryMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockResponseVacancyRepository)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockResponseVacancyRepository) Delete(arg0 model.ResponseVacancy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockResponseVacancyRepositoryMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockResponseVacancyRepository)(nil).Delete), arg0)
}

// FindByVacancyID mocks base method.
func (m *MockResponseVacancyRepository) FindByVacancyID(arg0 uint64) ([]model.ResponseVacancy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByVacancyID", arg0)
	ret0, _ := ret[0].([]model.ResponseVacancy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByVacancyID indicates an expected call of FindByVacancyID.
func (mr *MockResponseVacancyRepositoryMockRecorder) FindByVacancyID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByVacancyID", reflect.TypeOf((*MockResponseVacancyRepository)(nil).FindByVacancyID), arg0)
}
