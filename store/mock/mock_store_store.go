// Code generated by MockGen. DO NOT EDIT.
// Source: FL_2/store (interfaces: Store)

// Package mock is a generated GoMock package.
package mock

import (
	store "FL_2/store"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// Order mocks base method.
func (m *MockStore) Order() store.OrderRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Order")
	ret0, _ := ret[0].(store.OrderRepository)
	return ret0
}

// Order indicates an expected call of Order.
func (mr *MockStoreMockRecorder) Order() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Order", reflect.TypeOf((*MockStore)(nil).Order))
}

// ResponseOrder mocks base method.
func (m *MockStore) ResponseOrder() store.ResponseOrderRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResponseOrder")
	ret0, _ := ret[0].(store.ResponseOrderRepository)
	return ret0
}

// ResponseOrder indicates an expected call of ResponseOrder.
func (mr *MockStoreMockRecorder) ResponseOrder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResponseOrder", reflect.TypeOf((*MockStore)(nil).ResponseOrder))
}

// ResponseVacancy mocks base method.
func (m *MockStore) ResponseVacancy() store.ResponseVacancyRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResponseVacancy")
	ret0, _ := ret[0].(store.ResponseVacancyRepository)
	return ret0
}

// ResponseVacancy indicates an expected call of ResponseVacancy.
func (mr *MockStoreMockRecorder) ResponseVacancy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResponseVacancy", reflect.TypeOf((*MockStore)(nil).ResponseVacancy))
}

// User mocks base method.
func (m *MockStore) User() store.UserRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "User")
	ret0, _ := ret[0].(store.UserRepository)
	return ret0
}

// User indicates an expected call of User.
func (mr *MockStoreMockRecorder) User() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockStore)(nil).User))
}

// Vacancy mocks base method.
func (m *MockStore) Vacancy() store.VacancyRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Vacancy")
	ret0, _ := ret[0].(store.VacancyRepository)
	return ret0
}

// Vacancy indicates an expected call of Vacancy.
func (mr *MockStoreMockRecorder) Vacancy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Vacancy", reflect.TypeOf((*MockStore)(nil).Vacancy))
}
